name: Runing on a AWS EC2

on: 
  push:
      branches:
        - main

jobs: 
  Test:
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v3

      - name: Cache dependencies
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
     
      - name: Install dependencies
        run: npm install
      
      - name: Run tests
        run: npm test

  Lint:
    needs: Test
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v3

      - name: Restore Cache dependencies
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
     
      - name: Install dependencies
        run: npm install
      
      - name: Run Lint
        run: npm run lint

  Build_and_Push_Docker_image:
    needs: [Test,Lint]
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub 
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: 
          push: true 
          tags: shashmitha2001/react-docker-aws-deploy:v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if EC2 exists
        id: check-ec2
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=MyAppServer" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)

          if [ -z "$INSTANCE_ID" ]; then
            echo "No instance found"
            echo "exists=false" >> $GITHUB_OUTPUT
          else
            echo "Found instance: $INSTANCE_ID"
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Security Group
        id: sg-setup
        run: |
          # Try to find an existing SG by name
          SG_ID=$(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=my-github-actions-sg" \
            --query "SecurityGroups[0].GroupId" \
            --output text 2>/dev/null || true)

          if [ "$SG_ID" = "None" ] || [ -z "$SG_ID" ]; then
            echo "Creating new Security Group..."
            VPC_ID=$(aws ec2 describe-vpcs \
              --filters "Name=isDefault,Values=true" \
              --query "Vpcs[0].VpcId" \
              --output text)

            SG_ID=$(aws ec2 create-security-group \
              --group-name my-github-actions-sg \
              --description "Security group for GitHub Actions EC2" \
              --vpc-id $VPC_ID \
              --query 'GroupId' \
              --output text)

            # Allow SSH & HTTP
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0
          fi

          echo "sg_id=$SG_ID" >> $GITHUB_OUTPUT

      - name: Get default subnet
        id: subnet
        run: |
          SUBNET_ID=$(aws ec2 describe-subnets \
            --filters "Name=default-for-az,Values=true" \
            --query "Subnets[0].SubnetId" \
            --output text)

          echo "subnet_id=$SUBNET_ID" >> $GITHUB_OUTPUT

      - name: Create EC2 if not exists
        if: steps.check-ec2.outputs.exists == 'false'
        id: create-ec2
        run: |
          # Verify the key exists
          echo "Checking key pair 'github' in region: ${{ secrets.AWS_REGION }}"
          aws ec2 describe-key-pairs --key-names github --region ${{ secrets.AWS_REGION }}
          
          # Create instance
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-08c40ec9ead489470 \
            --count 1 \
            --instance-type t2.micro \
            --key-name github \  # ← Using 'github' now
            --security-group-ids ${{ steps.sg-setup.outputs.sg_id }} \
            --subnet-id ${{ steps.subnet.outputs.subnet_id }} \
            --region ${{ secrets.AWS_REGION }} \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=MyAppServer}]' \
            --query 'Instances[0].InstanceId' \
            --output text
          )
          
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "Waiting for EC2 to be ready..."
          aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID --region ${{ secrets.AWS_REGION }}


      - name: Get EC2 public IP
        id: ec2-ip
        run: |
          IP=$(aws ec2 describe-instances \
            --instance-ids ${{ steps.check-ec2.outputs.instance_id || steps.create-ec2.outputs.instance_id }} \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "ec2_ip=$IP" >> $GITHUB_OUTPUT

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy Docker to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ steps.ec2-ip.outputs.ec2_ip }} << EOF
            # Install Docker if not already installed
            if ! command -v docker &> /dev/null; then
              sudo apt update -y
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            fi

            # Pull latest Docker image and run container
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/react-docker-aws-deploy:latest
            docker stop monitor-app || true
            docker rm monitor-app || true
            docker run -d -p 80:80 --name monitor-app ${{ secrets.DOCKERHUB_USERNAME }}/react-docker-aws-deploy:latest
          EOF

            